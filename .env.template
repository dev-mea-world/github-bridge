# Glor.IA GitHub Bridge — Environment Variables Template
#
# How to use:
# - Copy this file to `.env.local` for local development, or to `.env` / set in your hosting env (e.g., Vercel Project Settings → Environment Variables) for production.
# - Only server-side variables are used here; no `NEXT_PUBLIC_` variables are required.
# - See `src/lib/env.ts` for the authoritative schema and required/optional fields.

########################################
# GitHub Auth — choose ONE mode
########################################

# GITHUB_MODE selects the authentication strategy:
# - `PAT` → use a Personal Access Token in `GH_TOKEN`
# - `APP` → use a GitHub App’s credentials (`GH_APP_*`)
GITHUB_MODE=

# --- PAT mode ---
# GH_TOKEN: Personal Access Token used by the bridge when `GITHUB_MODE=
# Where to create:
#   GitHub → Settings → Developer settings → Personal access tokens
# Scopes:
#   - Classic token: grant `repo` scope (covers contents, PRs, issues, code search)
#   - Fine-grained token: Repository access to needed repos with permissions:
#       Contents: Read and write
#       Pull requests: Read and write
#       Issues: Read and write
#       Metadata: Read-only (default)
GH_TOKEN=

# --- GitHub App mode ---
# GH_APP_ID: Numeric App ID of your GitHub App.
#   Where: GitHub → Settings → Developer settings → GitHub Apps → <Your App> → App ID
GH_APP_ID=

# GH_APP_PRIVATE_KEY: Base64-encoded contents of the App’s private key (PEM).
#   Steps:
#     1) Download the private key from your GitHub App page (it’s a .pem file)
#     2) Base64-encode WITHOUT newlines:
#        - macOS:   base64 -i app.private-key.pem | tr -d '\n'
#        - Linux:   base64 -w0 app.private-key.pem
#     3) Paste the one-line base64 string below
GH_APP_PRIVATE_KEY=

# GH_APP_INSTALLATION_ID: The Installation ID where the App is installed.
#   Where:
#     - App page → Install App → click your org/user installation; the URL contains `/installations/<ID>`
#     - Or via API: authenticate as App and call GET /app/installations
GH_APP_INSTALLATION_ID=

########################################
# Webhooks
########################################

# GH_WEBHOOK_SECRET: Secret used to verify GitHub webhooks (`X-Hub-Signature-256`).
#   Where to set:
#     - GitHub App: App settings → Webhooks → Webhook secret
#     - Repo/org webhook (PAT mode): Repository/Organization → Settings → Webhooks → Secret
#   Must match between GitHub and this service.
GH_WEBHOOK_SECRET=

########################################
# Bridge Security
########################################

# AGENT_SHARED_SECRET: HMAC secret required by /api/agent/execute via header `X-Signature`.
#   Generation (choose one):
#     - openssl rand -hex 32
#     - openssl rand -base64 32
AGENT_SHARED_SECRET=

# AGENT_JWT_SECRET (optional): If provided, requests with `Authorization: Bearer <JWT>`
#   will be verified using this secret. Omit to disable JWT verification.
#   Generation: openssl rand -hex 32
AGENT_JWT_SECRET=

########################################
# Repository Allowlist
########################################

# REPO_ALLOWLIST: Comma-separated list of allowed repositories in `owner/repo` form.
#   Requests targeting repos outside this allowlist are rejected.
#   Example: meaworldgithu/glor.ia-core,acme/app
REPO_ALLOWLIST=

########################################
# Runtime & Logging
########################################

# NODE_ENV: development | test | production (default: development)
NODE_ENV=

# LOG_LEVEL: fatal | error | warn | info | debug | trace | silent (default: info)
LOG_LEVEL=

